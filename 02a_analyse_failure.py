import pandas as pd

import csv
from collections import Counter
import re
bracket_pattern = re.compile(r'\[([^\]]*)\]')
# IDs wie OOZ00000002K028: 15 Zeichen, Buchstaben und Ziffern
id_pattern = re.compile(r'^[A-Za-z0-9]{15}$')

def analyse_failure(import_file, failure_file):
    """
    Analyse a Vault Loader failure file and print an overview of error types.
    Args:
        import_file (str): Path to the original import CSV file.
        failure_file (str): Path to the *_FAILURE.csv file generated by Vault Loader.
    """
    # Count objects to import using pandas
    try:
        df_import = pd.read_csv(import_file, encoding='utf-8')
        total_objects = len(df_import)
    except Exception as e:
        print(f"Error reading import file: {e}")
        total_objects = 'N/A'

    # Read failure file and collect errors using pandas
    error_counter = Counter()
    try:
        df_failure = pd.read_csv(failure_file, encoding='utf-8')
        error_rows = len(df_failure)
        if 'errors' in df_failure.columns:
            for errors in df_failure['errors'].fillna(''):
                if errors:
                    def bracket_replacer(match):
                        content = match.group(1).strip()
                        if '=' in content:
                            before_eq, _ = content.split('=', 1)
                            return f'[{before_eq}=\033[31m***\033[0m]'
                        elif id_pattern.match(content):
                            return '[\033[34m***\033[0m]'
                        else:
                            return match.group(0)
                    err_clean = bracket_pattern.sub(bracket_replacer, errors)
                    err_clean = re.sub(r'\s+', ' ', err_clean).strip()
                    if err_clean:
                        error_counter[err_clean] += 1
    except Exception as e:
        print(f"Error reading failure file: {e}")
        error_rows = 'N/A'

    print("\n--- Import Failure Analysis ---")
    print(f"Objects in loader file (to import): {total_objects}")
    print(f"Errors occurred: {error_rows}")
    print("\nError type overview:")
    if error_counter:
        for err, count in error_counter.most_common():
            print(f"- {err}: {count}")
    else:
        print("No error details found in failure file.")
# Starte interaktiven Modus, wenn das Skript direkt ausgef√ºhrt wird
import os

def analyse_folder(folder_path):
    # Suche alle *_FAILURE.csv im Ordner
    files = [f for f in os.listdir(folder_path) if f.endswith('_FAILURE.csv')]
    if not files:
        print("No *_FAILURE.csv files found in the folder.")
        return
    for failure_file in files:
        # Import file: same name, but without _FAILURE
        import_file = failure_file.replace('_FAILURE.csv', '.csv')
        import_path = os.path.join(folder_path, import_file)
        failure_path = os.path.join(folder_path, failure_file)
        print(f"\n\033[32m=== Analysis for: {import_file} / {failure_file} ===\033[0m")
        if not os.path.exists(import_path):
            print(f"Import file not found: {import_path}")
            continue
        analyse_failure(import_path, failure_path)

if __name__ == "__main__":
    print("Do you want to check a single file pair (1) or all pairs in a folder (2)?")
    mode = input("Please enter 1 or 2: ").strip()
    if mode == '1':
        import_file = input("Path to import (loader) file: ").strip()
        failure_file = input("Path to failure file: ").strip()
        print(f"\n\033[32m=== Analysis for: {os.path.basename(import_file)} / {os.path.basename(failure_file)} ===\033[0m")
        analyse_failure(import_file, failure_file)
    elif mode == '2':
        folder = input("Path to the folder with the files: ").strip()
        analyse_folder(folder)
    else:
        print("Cancelled. Please enter 1 or 2.")